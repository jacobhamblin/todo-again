{"version":3,"sources":["logo.svg","Todo/Item/index.js","Todo/index.js","App.js","serviceWorker.js","index.js"],"names":["Item","id","completed","name","removeItem","toggleCompleted","style","backgroundColor","undefined","className","onClick","STORAGE_ITEMS_KEY","Todo","PureComponent","localStorageItems","JSON","parse","window","localStorage","getItem","state","showCompleted","newItemName","items","this","newItems","setState","updateLocalStorage","toggleShowCompleted","submitItem","setItem","stringify","getVisibleItems","props","visibleItems","Object","keys","forEach","newProps","key","push","render","completedText","placeholder","onChange","e","target","value","onKeyPress","App","Component","Boolean","location","hostname","match","container","document","querySelector","ReactDOM","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.03ba1213.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.103b5fa1.svg\";","import React from 'react';\nimport './Item.css';\n\nconst Item = ({id, completed, name, removeItem, toggleCompleted}) => {\n  const style = completed ? {backgroundColor: '#8BFEA8'} : undefined;\n  return (\n    <div className='ItemContainer'>\n      <li className='Item' style={style} onClick={() => {toggleCompleted(id)}}>\n        {name}\n      </li>\n      <span className='Remove' style={style} onClick={() => { removeItem(id) }}>x</span>\n    </div>\n  );\n}\n\nexport default Item;\n","import React, { PureComponent } from 'react';\nimport Item from './Item';\nimport './Todo.css';\n\nconst STORAGE_ITEMS_KEY = \"todoItems\";\n\nclass Todo extends PureComponent {\n  localStorageItems = () => JSON.parse(window.localStorage.getItem(STORAGE_ITEMS_KEY) || \"{}\");\n  state = {id: 1, showCompleted: false, newItemName: '', items: this.localStorageItems()};\n  toggleCompleted = (id) => {\n    const { items } = this.state;\n    const newItems = {...items}\n    newItems[id].completed = !newItems[id].completed;\n    this.setState({ items: newItems }, this.updateLocalStorage);\n  }\n  toggleShowCompleted = () => {\n    const { showCompleted } = this.state;\n    this.setState({showCompleted: !showCompleted});\n  }\n  submitItem = () => {\n    const { id, items, newItemName } = this.state;\n    const newItems = {...items};\n    newItems[id] = {completed: false, id, name: newItemName};\n    this.setState({newItemName: '', items: newItems, id: id + 1 }, this.updateLocalStorage);\n  }\n  updateLocalStorage = () => {\n    window.localStorage.setItem(STORAGE_ITEMS_KEY, JSON.stringify(this.state.items));\n  }\n  removeItem = (id) => {\n    const newItems = {...this.state.items};\n    delete newItems[id];\n    this.setState({ items: newItems }, this.updateLocalStorage);\n  }\n  getVisibleItems = () => {\n    const props = {\n      toggleCompleted: this.toggleCompleted,\n    };\n    const {items, showCompleted} = this.state;\n    const visibleItems = [];\n    Object.keys(items).forEach(id => {\n      if (!items[id].completed || showCompleted) {\n        const newProps = {...props, ...items[id], id, key: id, removeItem: this.removeItem};\n        visibleItems.push(<Item {...newProps} />)\n      }\n    });\n    return visibleItems;\n  }\n  render() {\n    const { newItemName, showCompleted } = this.state;\n    const completedText = showCompleted ? 'Hide Completed' : 'Show Completed'\n    return (\n      <div className='Todo'>\n        <h2>Todo</h2>\n        <div className='Todo__new-item'>\n          <input\n            className='Todo__new-item__name'\n            placeholder='What do you need to do?'\n            onChange={(e) => this.setState({newItemName: e.target.value})}\n            onKeyPress={(e) => {if (e.key === 'Enter') this.submitItem()}}\n            value={newItemName}\n          />\n          <button\n            className='Todo__new-item__button'\n            onClick={this.submitItem}\n          >\n            Add Todo Item\n          </button>\n        </div>\n        <ul className='Todo__items-list'>\n          {this.getVisibleItems()}\n        </ul>\n        <div className='Todo__buttons'>\n          <button className='Todo__show-completed' onClick={() => this.toggleShowCompleted()}>{completedText}</button>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default Todo;\n","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Todo from './Todo';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className='App'>\n        <Todo />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nconst container = document.querySelector('#root');\nif (container) ReactDOM.render(<App />, container);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}